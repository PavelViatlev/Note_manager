# Создание меню действий   Grade 1. Этап 3: Задание 5
from datetime import timedelta

# Тестовый список заметок:
notes = [
    {'Имя': 'Алексей', 'Заголовок': 'Список покупок', 'Описание': 'Купить продукты на неделю', 'Статус': 'новая',
     'Дата создания': '27.11.2024', 'Дедлайн': '30.11.2024'},
    {'Имя': 'Мария', 'Заголовок': 'Учеба', 'Описание': 'Подготовиться к экзамену', 'Статус': 'в процессе',
     'Дата создания': '25.11.2024', 'Дедлайн': '01.12.2024'},
    {'Имя': 'Иван', 'Заголовок': 'План работы', 'Описание': 'Завершить проект', 'Статус': 'выполнена',
     'Дата создания': '20.11.2024', 'Дедлайн': '26.11.2024'},
    {'Имя': 'Сергей', 'Заголовок': 'План работы', 'Описание': 'Завершить проект', 'Статус': 'новая',
     'Дата создания': '20.11.2024', 'Дедлайн': '26.11.2024'},
    {'Имя': 'Виктор', 'Заголовок': 'План работы', 'Описание': 'Создать проект', 'Статус': 'выполнена',
     'Дата создания': '20.11.2024', 'Дедлайн': '26.11.2024'}
]

#------------------------------------------------------------------------------------------------------------------------
# Определение функции "Создание заметки"
def create_note():
    import datetime
    from datetime import datetime
    note = {}  # Создаем словарь для заметки
# Ввод данных заметки в словарь от Пользователя:
    print("Введите данные для создания заметки:")
# Ввод Имени пользователя
    while True:  # цикл проверки пустого ввода
        note["Имя"] = input("\nВведите Имя пользователя: ").strip()  # с удалением пробелов
        if note["Имя"] == "":  # проверка пустого ввода
                print("Имя не может быть пустым. Повторите ввод.")
        else:
                break  # ввод корректный, выход из цикла
# Ввод Заголовка
    while True:  # цикл проверки пустого ввода
        note["Заголовок"] = input("\nВведите Заголовок заметки: ").strip()  # с удалением пробелов
        if note["Заголовок"] == "":  # проверка пустого ввода
            print("Заголовок не может быть пустым. Повторите ввод.")
        else:
            break  # ввод корректный, выход из цикла
# Ввод Описания
    while True:  # цикл проверки пустого ввода
        note["Описание"] = input("\nВведите Описание заметки: ").strip()  # с удалением пробелов
        if note["Описание"] == "":  # проверка пустого ввода
            print("Описание не может быть пустым. Повторите ввод.")
        else:
            break  # ввод корректный, выход из цикла
# Ввод Статуса
    status = ('новая', 'в процессе', 'выполнена') # Создаем кортеж, возможных статусов заметки
    while True:  # цикл проверки ввода Статуса
        note["Статус"] = input("\nВведите Статус заметки (новая, в процессе, выполнена): ").strip()  # с удалением пробелов
        if note["Статус"] in status:  # проверка ввода
            break  # ввод корректный, выход из цикла
        else: # Запрашиваем существующий статус заметки, повтор ввода Статуса заметки в цикле
            print("Не корректный статус, введите действительный статус заметки - новая, в процессе, выполнена: ")

# Получаем автоматически текущую дату и помещаем её в словарь note как дату создания заметки:
    note["Дата создания"] = datetime.today().strftime('%d.%m.%Y')

# Ввод и проверка формата ввода Дедлайна (по умолчанию - плюс 5 дн. от текущей даты)
    while True:  # цикл проверки правильного формата ввода Дедлайна
            from datetime import timedelta
            deadline_default = datetime.today() + timedelta(days=5) # Дедлайн по умолчанию - плюс 5 дн. от текущей даты
            deadline = input(f"Введите Дедлайн в формате 'день.месяц.год',"
                                    f" в случае пустого ввода Дедлайн - {deadline_default.strftime('%d.%m.%Y')}: ")
            if deadline == "":
                note["Дедлайн"] = deadline_default.strftime('%d.%m.%Y')
                break  # выход из цикла
            else:
                try:
                    note["Дедлайн"] = deadline
                    datetime.strptime(deadline, "%d.%m.%Y")  # Если строка (deadline) и код формата (%d.%m.%Y),
                                                                # не совпадают, возникает ошибка ValueError.
                    break # выход из цикла
                except ValueError:  # обработка ошибки
                    print("Дата Дедлайна некорректна. Повторите ввод Дедлайна в требуемом формате.")

# Вывод введенной заметки на экран
    notes.append(note) # Добавление словаря с новой заметкой в список заметок
    print(f"\nНовая заметка создана:")
    for key, value in note.items():
        print(key, "-", value)
    print("-------------------------------------")
# Завершение функции "Создание заметки"
#-----------------------------------------------------------------------------------------------------------------------

#------------------------------------------------------------------------------------------------------------------------
# Определение функции "Вывод заметок на экран"
def display_notes():
    if len(notes) == 0:
        print("\nУ вас нет сохранённых заметок.\nРабота программы завершена.")
    else:
        print("\nСписок заметок.\n-----------------------------")
        for i in range(len(notes)):
            print(f"Заметка № {i + 1}: ")
            for key, value in notes[i].items():
                print(key, ":", value)
            print("-------------------------------------")
# Завершение функции "Вывод заметок на экран"
#-----------------------------------------------------------------------------------------------------------------------

#------------------------------------------------------------------------------------------------------------------------
# Определение функции "Обновление заметок"
def update_notes (note):
    from datetime import datetime
    print("\nОбновляемая заметка:")
    for key, value in note.items(): # Цикл вывода на экран данных текущей заметки
        print(key, "-", value)
    while True: # Цикл запроса обновляемых данных заметки
        key = input("\nВведите какое поле вы хотите обновить ('Имя', 'Заголовок', 'Описание', 'Статус', 'Дедлайн')\n"
                    "или 'пустой ввод' для выхода из программы: ")
        key = key.strip()  # удаляем начальные/конечные пробелы
        if key == 'Имя':
            note['Имя'] = input("Введите новое значение для поля 'Имя': ")
            print("\nЗаметка обновлена:")
            for key, value in note.items():
                print(key, "-", value)
            print("-------------------------------------")
            break
        elif key == 'Заголовок':
            note['Заголовок'] = input("Введите новое значение для поля 'Заголовок': ")
            print("\nЗаметка обновлена:")
            for key, value in note.items():
                print(key, "-", value)
            print("-------------------------------------")
        elif key == 'Описание':
            note['Описание'] = input("Введите новое значение для поля 'Описание': ")
            print("\nЗаметка обновлена:")
            for key, value in note.items():
                print(key, "-", value)
            print("-------------------------------------")
        elif key == 'Статус':
            note['Статус'] = input("Введите новое значение для поля 'Статус' (новая, в процессе, выполнена): ")
            status = ('новая', 'в процессе', 'выполнена')  # словарь возможных значений статуса заметки
            while True:
                if note['Статус'] in status:  # проверка действительного индекса нового статуса заметки
                    break
                else:
                    note['Статус'] = input( 'Такого статуса не существует, введите существующий статус заметки: ')  # Запрашиваем существующий статус заметки
            print("\nЗаметка обновлена:")
            for key, value in note.items():
                print(key, "-", value)
            print("-------------------------------------")
            break
        elif key == 'Дедлайн':
            while True: # цикл проверки правильного формата ввода дедлайн
                try:
                    note['Дедлайн'] = input(f"Введите новое значение для поля 'Дедлайн' в формате - день.месяц.год: ")
                    if datetime.strptime(note['Дедлайн'], "%d.%m.%Y"):  # Если note['Дедлайн'] и код формата (%d.%m.%Y),
                                                                # не совпадают, возникает ошибка ValueError.
                        print("\nЗаметка обновлена:")
                        for key, value in note.items():
                            print(key, "-", value)
                        print("-------------------------------------")
                        break
                    else:
                        pass
                except ValueError:  # обработка ошибки ввода формата
                    print("Формат даты некорректен. Необходимо вводить Дедлайн в требуемом формате - 'день.месяц.год.'")
        elif key == '':
            print("Обновление завершено.")
            break
        else:
            print("\nТакого поля не существует.\nВведите корректное название поля для обновления")

# Завершение функции "Обновление заметок"
#-----------------------------------------------------------------------------------------------------------------------

#------------------------------------------------------------------------------------------------------------------------
# Определение функции "Удаление заметок"
def delete_note():
    while True:
        j = 0 #счетчик удаленных заметок
        # переменная критерия для удаления заметки:
        criteria_del = input("\nВведите критерий (Имя или Заголовок) для удаления (Ввод не может быть пустым): ")
        if criteria_del.strip() == "":  # проверка пустого ввода и удаление начальных/конечных пробелов
                print("Критерий не может быть пустым. Повторите ввод.")
        else:
            break  # выход из цикла, если ввод корректный

    for i in range(len(notes)): # цикл сравнения критерия criteria_del с существующими элементами
        if j > 0:
            i = i - j # i уменьшается на кол-во удаленных заметок
        else:
            pass
        if criteria_del.strip() in notes[i].values():
            j = j + 1 # счетчик удаленных заметок
            notes.pop(i) # Удаление заметки i
            print(f"\nУдалена заметка с критерием - {criteria_del.strip()}.\nОстались следующие заметки:")
            display_notes()
    else: # если критерий criteria_del не найден в существующих элементах
        if j == 0: # нет удаленных заметок
            print(f"Заметок с Именем пользователя или Заголовком - '{criteria_del}' не найдено.")
# Завершение функции "Удаление заметок"
#-----------------------------------------------------------------------------------------------------------------------

# Определение функции поиска заметок
#-----------------------------------------------------------------------------------------------------------------------
def search_notes(notes, keyword=None, status=None):
    if len(notes) == 0:  # проверка наличия заметок в списке
        print("\nСписок заметок пуст.\nПоиск невозможен.")
        return
# выполняется условие при отсутствии Ключевого слова и Статуса
    if keyword is None and status is None:
        print("\nКлючевое слово и/или Статус не введены.\nПоиск завершен.")
# выполняется поиск при наличии Ключевого слова и отсутствии Статуса
    elif keyword != None and status is None:
        j = 0  # счетчик найденных заметок
        for i in range(len(notes)):
            cur_values = list(notes[i].values())  # значения словаря i заносим во временный список(cur_values)
            for k in range(len(cur_values)): # цикл проверки наличия Ключевого слова во временном списке
                if keyword in cur_values[k]:  # проверка наличия Ключевого слова в элементе 'к' временного списка
                    j += 1
                    if j == 1:
                        print(f"\nПо Ключевому слову - '{keyword}' найдены заметки:\n-----------------------------")
                        print(f"Заметка {j}.")
                    else:
                        print(f"Заметка {j}.")
                    for key, value in notes[i].items():
                        print(key, "-", value)
                    print("-------------------------------------")
        if j == 0: # Вывод на экран сообщения об отсутствии в заметках введенного Ключевого слова
            print(f"\nКлючевого слова - '{keyword}' в заметках не существует."
                    "\nПоиск завершен.")
# выполняется поиск при отсутствии Ключевого слова и наличии Статуса
    elif keyword is None and status != None:
        j = 0  # счетчик найденных заметок
        for i in range(len(notes)):
            if status == notes[i].get('Статус'):  # проверка Статуса во временном списке
                j += 1
                if j == 1:
                    print(f"\nПо Статусу - '{status}' найдены заметки:\n-----------------------------")
                    print(f"Заметка{j}.")
                else:
                    print(f"Заметка{j}.")
                for key, value in notes[i].items():
                    print(key, "-", value)
                print("-------------------------------------")
        if j == 0: # Вывод на экран сообщения об отсутствии в заметках введенного Статуса
            print(f"\nСтатуса - '{status}' в заметках не существует."
                    "\nПоиск завершен.")
# выполняется поиск при одновременном наличии Ключевого слова и Статуса
    else:
        j = 0  # счетчик найденных заметок
        for i in range(len(notes)):
            cur_values = list(notes[i].values())  # значения словаря i заносим во временный список - cur_values
            for k in range(len(cur_values)):  # цикл проверки наличия Ключевого слова во временном списке
                if keyword in cur_values[k] and status == notes[i].get('Статус'):  # проверка Ключевого слова
                    # в элементе 'к' временного списка и Статуса в словаре notes[i]
                    j += 1
                    if j == 1:
                        print(f"\nПо Ключевому слову - '{keyword}' и Статусу - '{status}' найдены заметки:"
                              f"\n-----------------------------")
                        print(f"Заметка {j}.")
                    else:
                        print(f"Заметка {j}.")
                    for key, value in notes[i].items():
                        print(key, "-", value)
                    print("-------------------------------------")

        if j == 0: # Вывод на экран сообщения об отсутствии в заметках введенных Ключевого слова и Статуса
            print(f"\nНе найдены заметки с одновременным наличием Ключевого слова - '{keyword}' и Статуса - '{status}'."
                 "\nПоиск завершен.")
# Завершение функции поиска заметок
#-----------------------------------------------------------------------------------------------------------------------


# Программа Меню действий
while True:
    print("\nМеню действий:\n1. Создать новую заметку\n2. Показать все заметки\n3. Обновить заметку\n4. Удалить заметку\n"
      "5. Найти заметки\n6. Выйти из программы")
    index_action = int (input("\nВведите индекс желаемого действия из Меню действий: "))
    if index_action == 1: # Создание заметки
        create_note()
    elif index_action == 2: # Вывод заметок на экран
        display_notes()
    elif index_action == 3: # Обновить заметку
        index_note = input("\nВведите номер обновляемой заметки (пустой ввод - окончание обновления): ")
        if index_note.strip() != "":
            update_notes(notes[int(index_note.strip()) - 1])
        else:
            print("\nОбновление завершено.")
    elif index_action == 4: # Удаление заметок
        delete_note()
    elif index_action == 5: # Поиск заметок
        criteria_search = input("\nДля поиска только по Ключевому слову в полях 'Имя', 'Заголовок', 'Описание' введите - 1.\n"
                                "Для поиска только по Статусу введите - 2.\n"
                                "Для поиска по Ключевому слову и Статусу введите - 3.\n"
                                "Другой ввод - окончание поиска: ")
        if criteria_search == "1":
            keyword = input("\nВведите Ключевое слово: ")
            search_notes(notes, keyword)
        elif criteria_search == "2":
            status = input("\nВведите Статус: ")
            search_notes(notes, None, status)
        elif criteria_search == "3":
            keyword = input("\nВведите Ключевое слово: ")
            status = input("\nВведите Статус: ")
            search_notes(notes, keyword, status)
        else:
            print("\nПоиск завершен.")
    elif index_action == 6:
        print("\nПрограмма завершена. Спасибо за использование!")
        break

    else:
        print("\nТакого индекса в Меню действий не существует.")
